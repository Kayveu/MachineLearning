colnames(nonlin) <- c('predictor', 'fstat', 'pvalueofFstat')
for (i in 2:length(columns)) {
nonlin[i-1,1] = columns[i]
polyform <- paste(c('crim ~ ', columns[i], ' + ', 'I(' ,columns[i], '^2)', ' + ', 'I(', columns[i], '^3)'), collapse = '')
form <- paste(c('crim ~ ', columns[i]), collapse = '')
fit <- lm(as.formula(form), data = Boston)
polyfit <- lm(as.formula(polyform), data = Boston)
nonlin[i-1,2] <- anova(polyfit, fit)$F[2]
nonlin[i-1,3] <- anova(polyfit, fit)$`Pr(>F)`[2]
}
nonlin[order(order$fstat),]
nonlin[order(nonlin$fstat),]
nonlin[order(nonlin[,2]),]
nonlin <- nonlin[!is.na(nonlin[,2]),]
nonlin
for (i in 2:length(columns)) {
nonlin[i-1,1] = columns[i]
polyform <- paste(c('crim ~ ', columns[i], ' + ', 'I(' ,columns[i], '^2)', ' + ', 'I(', columns[i], '^3)'), collapse = '')
form <- paste(c('crim ~ ', columns[i]), collapse = '')
fit <- lm(as.formula(form), data = Boston)
polyfit <- lm(as.formula(polyform), data = Boston)
nonlin[i-1,2] <- as.numeric(anova(polyfit, fit)$F[2])
nonlin[i-1,3] <- as.numeric(anova(polyfit, fit)$`Pr(>F)`[2])
}
nonlin <- matrix(0, nrow = 13, ncol = 3)
colnames(nonlin) <- c('predictor', 'fstat', 'pvalueofFstat')
for (i in 2:length(columns)) {
nonlin[i-1,1] = columns[i]
polyform <- paste(c('crim ~ ', columns[i], ' + ', 'I(' ,columns[i], '^2)', ' + ', 'I(', columns[i], '^3)'), collapse = '')
form <- paste(c('crim ~ ', columns[i]), collapse = '')
fit <- lm(as.formula(form), data = Boston)
polyfit <- lm(as.formula(polyform), data = Boston)
nonlin[i-1,2] <- as.numeric(anova(polyfit, fit)$F[2])
nonlin[i-1,3] <- as.numeric(anova(polyfit, fit)$`Pr(>F)`[2])
}
nonlin <- nonlin[!is.na(nonlin[,2]),]
nonlin
nonlin[,2] <- as.numeric(nonlin[,2])
nonlin
typeof(nonlin[1,2])
nonlin <- as.data.frame(nonlin)
nonlin
nonlin[order(nonlin[,2]),]
nonlin[,2] <- as.numeric(nonlin[,2])
nonlin[order(nonlin[,2]),]
for (i in 2:length(columns)) {
nonlin[i-1,1] = columns[i]
polyform <- paste(c('crim ~ ', columns[i], ' + ', 'I(' ,columns[i], '^2)', ' + ', 'I(', columns[i], '^3)'), collapse = '')
form <- paste(c('crim ~ ', columns[i]), collapse = '')
fit <- lm(as.formula(form), data = Boston)
polyfit <- lm(as.formula(polyform), data = Boston)
nonlin[i-1,2] <- as.numeric(anova(polyfit, fit)$F[2])
nonlin[i-1,3] <- as.numeric(anova(polyfit, fit)$`Pr(>F)`[2])
}
nonlin <- matrix(0, nrow = 13, ncol = 3)
colnames(nonlin) <- c('predictor', 'fstat', 'pvalueofFstat')
for (i in 2:length(columns)) {
nonlin[i-1,1] = columns[i]
polyform <- paste(c('crim ~ ', columns[i], ' + ', 'I(' ,columns[i], '^2)', ' + ', 'I(', columns[i], '^3)'), collapse = '')
form <- paste(c('crim ~ ', columns[i]), collapse = '')
fit <- lm(as.formula(form), data = Boston)
polyfit <- lm(as.formula(polyform), data = Boston)
nonlin[i-1,2] <- as.numeric(anova(polyfit, fit)$F[2])
nonlin[i-1,3] <- as.numeric(anova(polyfit, fit)$`Pr(>F)`[2])
}
nonlin <- nonlin[!is.na(nonlin[,2]),]
nonlin
nonlin <- as.numeric(nonlin)
nonlin
nonlin <- matrix(0, nrow = 13, ncol = 3)
colnames(nonlin) <- c('predictor', 'fstat', 'pvalueofFstat')
for (i in 2:length(columns)) {
nonlin[i-1,1] = columns[i]
polyform <- paste(c('crim ~ ', columns[i], ' + ', 'I(' ,columns[i], '^2)', ' + ', 'I(', columns[i], '^3)'), collapse = '')
form <- paste(c('crim ~ ', columns[i]), collapse = '')
fit <- lm(as.formula(form), data = Boston)
polyfit <- lm(as.formula(polyform), data = Boston)
nonlin[i-1,2] <- as.numeric(anova(polyfit, fit)$F[2])
nonlin[i-1,3] <- as.numeric(anova(polyfit, fit)$`Pr(>F)`[2])
}
nonlin
?as.table
nonlin <- as.table(nonlin)
nonlin
nonlin <- matrix(0, nrow = 13, ncol = 3)
colnames(nonlin) <- c('predictor', 'fstat', 'pvalueofFstat')
for (i in 2:length(columns)) {
nonlin[i-1,1] = columns[i]
polyform <- paste(c('crim ~ ', columns[i], ' + ', 'I(' ,columns[i], '^2)', ' + ', 'I(', columns[i], '^3)'), collapse = '')
form <- paste(c('crim ~ ', columns[i]), collapse = '')
fit <- lm(as.formula(form), data = Boston)
polyfit <- lm(as.formula(polyform), data = Boston)
nonlin[i-1,2] <- as.numeric(anova(polyfit, fit)$F[2])
nonlin[i-1,3] <- as.numeric(anova(polyfit, fit)$`Pr(>F)`[2])
}
nonlin <- nonlin[!is.na(nonlin[,2]),]
nonlin <- as.table(nonlin)
nonlin
nonlin[order(nonlin[,2]),]
nonlin <- matrix(0, nrow = 13, ncol = 3)
colnames(nonlin) <- c('predictor', 'fstat', 'pvalueofFstat')
for (i in 2:length(columns)) {
nonlin[i-1,1] = columns[i]
polyform <- paste(c('crim ~ ', columns[i], ' + ', 'I(' ,columns[i], '^2)', ' + ', 'I(', columns[i], '^3)'), collapse = '')
form <- paste(c('crim ~ ', columns[i]), collapse = '')
fit <- lm(as.formula(form), data = Boston)
polyfit <- lm(as.formula(polyform), data = Boston)
nonlin[i-1,2] <- as.numeric(anova(polyfit, fit)$F[2])
nonlin[i-1,3] <- as.numeric(anova(polyfit, fit)$`Pr(>F)`[2])
}
nonlin <- nonlin[!is.na(nonlin[,2]),]
nonlin
nonlin[,2] <- as.numeric(nonlin[,2])
nonlin
nonlin <- as.data.frame(nonlin)
nonlin
nonlin[,2] <- as.numeric(nonlin[,2],)
nonlin[,2] <- as.numeric(nonlin[,2])
nonlin
BostonTable <- matrix(0, nrow = 13, ncol = 4)
colnames(BostonTable) <- c('Predictor', 'F-Stat', 'P-Value', 'Coef')
columns <- colnames(Boston)
for (i in 2:length(columns)) {
BostonTable[i-1,1] = columns[i]
form <- paste('crim ~', columns[i])
Bostonfit <- lm(as.formula(form), data = Boston)
BostonTable[i-1,2] = as.numeric(summary(Bostonfit)$fstatistic[1])
BostonTable[i-1,3] = as.numeric(anova(Bostonfit)$'Pr(>F)'[1])
BostonTable[i-1,4] = as.numeric(coef(Bostonfit)[2])
}
BostonTable <- as.data.frame(BostonTable, stringsAsFactors = FALSE)
BostonTable
nonlin <- matrix(0, nrow = 13, ncol = 3)
colnames(nonlin) <- c('predictor', 'fstat', 'pvalueofFstat')
for (i in 2:length(columns)) {
nonlin[i-1,1] = columns[i]
polyform <- paste(c('crim ~ ', columns[i], ' + ', 'I(' ,columns[i], '^2)', ' + ', 'I(', columns[i], '^3)'), collapse = '')
form <- paste(c('crim ~ ', columns[i]), collapse = '')
fit <- lm(as.formula(form), data = Boston)
polyfit <- lm(as.formula(polyform), data = Boston)
nonlin[i-1,2] <- as.numeric(anova(polyfit, fit)$F[2])
nonlin[i-1,3] <- as.numeric(anova(polyfit, fit)$`Pr(>F)`[2])
}
nonlin <- nonlin[!is.na(nonlin[,2]),]
nonlin <- as.data.frame(nonlin, stringsAsFactors = FALSE)
nonlin
nonlin[,2] <- as.numeric(nonlin[,2])
nonlin
nonlin[order(nonlin[,2]),]
nonlin
nonlin <- nonlin[order(nonlin[,2], descending = FALSE),]
nonlin[order(nonlin[,2], decreasing = FALSE),]
nonlin[order(nonlin[,2], decreasing = TRUE),]
rm(list = ls())
set.seed(5072)
library(MASS)
BostonTable <- matrix(0, nrow = 13, ncol = 4)
colnames(BostonTable) <- c('Predictor', 'F-Stat', 'P-Value', 'Coef')
columns <- colnames(Boston)
for (i in 2:length(columns)) {
BostonTable[i-1,1] = columns[i]
form <- paste('crim ~', columns[i])
Bostonfit <- lm(as.formula(form), data = Boston)
BostonTable[i-1,2] = as.numeric(summary(Bostonfit)$fstatistic[1])
BostonTable[i-1,3] = as.numeric(anova(Bostonfit)$'Pr(>F)'[1])
BostonTable[i-1,4] = as.numeric(coef(Bostonfit)[2])
}
BostonTable <- as.data.frame(BostonTable, stringsAsFactors = FALSE)
sigpred <- BostonTable[as.numeric(BostonTable$`P-Value`) < .05,][,1]
par(mfrow=c(3, 4))
for (i in 1:length(sigpred)) {
bostlab <- paste('Boston$', sigpred[i], sep = '')
plot(x = eval(parse(text = bostlab)), y = Boston$crim, xlab = 'x', ylab = 'Boston$crim', ylim = c(0,80), main = bostlab)
form <- paste('crim ~', sigpred[i])
Bostonfit <- lm(as.formula(form), data = Boston)
abline(Bostonfit, col = 'red')
}
par(mfrow = c(1,1))
sigpredmlm <- paste(sigpred, collapse = ' + ')
multilm <- paste('crim ~ ', sigpredmlm)
mulboston <- lm(as.formula(multilm), data = Boston)
sigmlm <- as.data.frame(coef(summary(mulboston)))
sigmlm[sigmlm$'Pr(>|t|)' < .05,]
sigmlmint <- sigmlm[-1,]
BostonTableint <- BostonTable[-1,]
plot(BostonTableint[,4], sigmlmint[,1], xlab = 'Simple', ylab = 'Multi')
nonlin <- matrix(0, nrow = 13, ncol = 3)
colnames(nonlin) <- c('predictor', 'fstat', 'pvalueofFstat')
for (i in 2:length(columns)) {
nonlin[i-1,1] = columns[i]
polyform <- paste(c('crim ~ ', columns[i], ' + ', 'I(' ,columns[i], '^2)', ' + ', 'I(', columns[i], '^3)'), collapse = '')
form <- paste(c('crim ~ ', columns[i]), collapse = '')
fit <- lm(as.formula(form), data = Boston)
polyfit <- lm(as.formula(polyform), data = Boston)
nonlin[i-1,2] <- anova(polyfit, fit)$F[2]
nonlin[i-1,3] <- anova(polyfit, fit)$`Pr(>F)`[2]
}
nonlin <- nonlin[!is.na(nonlin[,2]),]
nonlin <- as.data.frame(nonlin, stringsAsFactors = FALSE)
nonlin[,2] <- as.numeric(nonlin[,2])
nonlin[,3] <- as.numeric(nonlin[,2])
nonlin <- nonlin[order(nonlin[,2], decreasing = TRUE),]
nonlin
nonlin <- matrix(0, nrow = 13, ncol = 3)
colnames(nonlin) <- c('predictor', 'fstat', 'pvalueofFstat')
for (i in 2:length(columns)) {
nonlin[i-1,1] = columns[i]
polyform <- paste(c('crim ~ ', columns[i], ' + ', 'I(' ,columns[i], '^2)', ' + ', 'I(', columns[i], '^3)'), collapse = '')
form <- paste(c('crim ~ ', columns[i]), collapse = '')
fit <- lm(as.formula(form), data = Boston)
polyfit <- lm(as.formula(polyform), data = Boston)
nonlin[i-1,2] <- anova(polyfit, fit)$F[2]
nonlin[i-1,3] <- anova(polyfit, fit)$`Pr(>F)`[2]
}
nonlin <- nonlin[!is.na(nonlin[,2]),]
nonlin
nonlin <- as.data.frame(nonlin, stringsAsFactors = FALSE)
nonlin
nonlin[,2] <- as.numeric(nonlin[,2])
nonlin[,3] <- as.numeric(nonlin[,3])
nonlin <- nonlin[order(nonlin[,2], decreasing = TRUE),]
nonlin
nonlin[nonlin[,3] < .05,]
rm(list = ls())
library(ISLR)
set.seed(1)
alpha.fn = function(data, index) {
X = data$X[index]
Y = data$Y[index]
return((var(Y) - cov(X,Y))/(var(X) + var(Y) - 2*cov(X,Y)))
}
alpha.fn(Portfolio, 1:100)
set.seed(1)
?portfolio
?Portfolio
?boot
alpha.fn(Portfolio, sample(100, 100, replace= T))
boot(Portfolio, alpha.fn, R = 1000)
library(boot)
?boot
alpha.fn = function(data, index) {
X = data$X[index]
Y = data$Y[index]
return((var(Y) - cov(X,Y))/(var(X) + var(Y) - 2*cov(X,Y)))
}
alpha.fn(Portfolio, 1:100)
set.seed(1)
alpha.fn(Portfolio, sample(100, 100, replace= T))
boot(Portfolio, alpha.fn, R = 1000)
boot.fn = function(data, index) {
return(coef(lm(mpg~horsepower, data = data, subset = index)))
}
boot.fn(Auto, 1:392)
set.seed(1)
boot.fn(Auto, sample(392, 392, replace = T))
boot(Auto, boot.fn, 1000)
boot(Portfolio, alpha.fn, R = 1000)
boot.fn = function(data, index) {
return(coef(lm(mpg~horsepower, data = data, subset = index)))
}
boot.fn(Auto, 1:392)
boot.fn(Auto, sample(392, 392, replace = T))
boot(Auto, boot.fn, 1000)
summary(lm(mpg~horsepower, data = Auto))$coef
set.seed(5072)
library(MASS)
BostonTable <- matrix(0, nrow = 13, ncol = 4)
colnames(BostonTable) <- c('Predictor', 'F-Stat', 'P-Value', 'Coef')
columns <- colnames(Boston)
for (i in 2:length(columns)) {
BostonTable[i-1,1] = columns[i]
form <- paste('crim ~', columns[i])
Bostonfit <- lm(as.formula(form), data = Boston)
BostonTable[i-1,2] = as.numeric(summary(Bostonfit)$fstatistic[1])
BostonTable[i-1,3] = as.numeric(anova(Bostonfit)$'Pr(>F)'[1])
BostonTable[i-1,4] = as.numeric(coef(Bostonfit)[2])
}
BostonTable <- as.data.frame(BostonTable, stringsAsFactors = FALSE)
sigpred <- BostonTable[as.numeric(BostonTable$`P-Value`) < .05,][,1]
par(mfrow=c(3, 4))
for (i in 1:length(sigpred)) {
bostlab <- paste('Boston$', sigpred[i], sep = '')
plot(x = eval(parse(text = bostlab)), y = Boston$crim, xlab = 'x', ylab = 'Boston$crim', ylim = c(0,80), main = bostlab)
form <- paste('crim ~', sigpred[i])
Bostonfit <- lm(as.formula(form), data = Boston)
abline(Bostonfit, col = 'red')
}
par(mfrow = c(1,1))
sigpredmlm <- paste(sigpred, collapse = ' + ')
multilm <- paste('crim ~ ', sigpredmlm)
mulboston <- lm(as.formula(multilm), data = Boston)
sigmlm <- as.data.frame(coef(summary(mulboston)))
sigmlm[sigmlm$'Pr(>|t|)' < .05,]
sigmlmint <- sigmlm[-1,]
BostonTableint <- BostonTable[-1,]
set.seed(5072)
library(MASS)
BostonTable <- matrix(0, nrow = 13, ncol = 4)
colnames(BostonTable) <- c('Predictor', 'F-Stat', 'P-Value', 'Coef')
columns <- colnames(Boston)
for (i in 2:length(columns)) {
BostonTable[i-1,1] = columns[i]
form <- paste('crim ~', columns[i])
Bostonfit <- lm(as.formula(form), data = Boston)
BostonTable[i-1,2] = as.numeric(summary(Bostonfit)$fstatistic[1])
BostonTable[i-1,3] = as.numeric(anova(Bostonfit)$'Pr(>F)'[1])
BostonTable[i-1,4] = as.numeric(coef(Bostonfit)[2])
}
BostonTable
?Boston
sigmlm <- as.data.frame(coef(summary(mulboston)))
sigmlm[sigmlm$'Pr(>|t|)' < .05,]
sigmlmint <- sigmlm[-1,]
sigmlmint
?anova
rm(list = ls())
set.seed(5072)
library(MASS)
BostonTable <- matrix(0, nrow = 13, ncol = 4)
colnames(BostonTable) <- c('Predictor', 'F-Stat', 'P-Value', 'Coef')
columns <- colnames(Boston)
for (i in 2:length(columns)) {
BostonTable[i-1,1] = columns[i]
form <- paste('crim ~', columns[i])
Bostonfit <- lm(as.formula(form), data = Boston)
BostonTable[i-1,2] = as.numeric(summary(Bostonfit)$fstatistic[1])
BostonTable[i-1,3] = as.numeric(anova(Bostonfit)$'Pr(>F)'[1])
BostonTable[i-1,4] = as.numeric(coef(Bostonfit)[2])
}
BostonTable <- as.data.frame(BostonTable, stringsAsFactors = FALSE)
sigpred <- BostonTable[as.numeric(BostonTable$`P-Value`) < .05,][,1]
par(mfrow=c(3, 4))
for (i in 1:length(sigpred)) {
bostlab <- paste('Boston$', sigpred[i], sep = '')
plot(x = eval(parse(text = bostlab)), y = Boston$crim, xlab = 'x', ylab = 'Boston$crim', ylim = c(0,80), main = bostlab)
form <- paste('crim ~', sigpred[i])
Bostonfit <- lm(as.formula(form), data = Boston)
abline(Bostonfit, col = 'red')
}
par(mfrow = c(1,1))
sigpredmlm <- paste(sigpred, collapse = ' + ')
multilm <- paste('crim ~ ', sigpredmlm)
mulboston <- lm(as.formula(multilm), data = Boston)
sigmlm <- as.data.frame(coef(summary(mulboston)))
sigmlm[sigmlm$'Pr(>|t|)' < .05,]
sigmlmint <- sigmlm[-1,]
BostonTableint <- BostonTable[-1,]
plot(BostonTableint[,4], sigmlmint[,1], xlab = 'Simple', ylab = 'Multi')
nonlin <- matrix(0, nrow = 13, ncol = 3)
colnames(nonlin) <- c('predictor', 'fstat', 'pvalueofFstat')
for (i in 2:length(columns)) {
nonlin[i-1,1] = columns[i]
polyform <- paste(c('crim ~ ', columns[i], ' + ', 'I(' ,columns[i], '^2)', ' + ', 'I(', columns[i], '^3)'), collapse = '')
form <- paste(c('crim ~ ', columns[i]), collapse = '')
fit <- lm(as.formula(form), data = Boston)
polyfit <- lm(as.formula(polyform), data = Boston)
nonlin[i-1,2] <- anova(polyfit, fit)$F[2]
nonlin[i-1,3] <- anova(polyfit, fit)$`Pr(>F)`[2]
}
nonlin <- nonlin[!is.na(nonlin[,2]),]
nonlin <- as.data.frame(nonlin, stringsAsFactors = FALSE)
nonlin[,2] <- as.numeric(nonlin[,2])
nonlin[,3] <- as.numeric(nonlin[,3])
nonlin <- nonlin[order(nonlin[,2], decreasing = TRUE),]
nonlin
rm(list = ls())
rm(list = ls())
set.seed(5072)
x <- rnorm(100, 0, 1)
eps <- rnorm(100, 0, sqrt(0.25))
y <- -1 + (.5 * x) + eps
print(paste('Length:', length(y)))
plot(x,y)
lslm <- lm(y ~ x)
print(coef(lslm))
abline(lslm)
abline(a = -1, b = .5, col = 'red')
legend('bottomright', legend = c('Least Squares', 'Population'), col = c('black', 'red'), lty = 1)
sq <- x^2
poly <- lm(y ~ x + sq)
eps.1 <- rnorm(100, 0, sqrt(0.1))
y.1 <- -1 + (.5 * x) + eps.1
plot(x,y.1)
lslm.1 <- lm(y.1 ~ x)
abline(lslm.1)
abline(a = -1, b = .5, col = 'red')
sq <- x^2
poly.1 <- lm(y.1 ~ x + sq)
eps.5 <- rnorm(100, 0, sqrt(0.5))
y.5 <- -1 + (.5 * x) + eps.5
plot(x,y.5)
lslm.5 <- lm(y.5 ~ x)
abline(lslm.5)
abline(a = -1, b = .5, col = 'red')
sq <- x^2
poly.5 <- lm(y.5 ~ x + sq)
orig <- confint(lslm, level = .95)
setwd('..')
setwd('..')
setwd('Documents/R Work Dir/RAssignments/Machine Learning/Assignment 2/')
list.files()
souce('MLAssignment2.R')
source('MLAssignment2.R')
source('MLAssignment2.R')
rm(list = ls())
set.seed(5072)
x <- rnorm(100, 0, 1)
eps <- rnorm(100, 0, sqrt(0.25))
y <- -1 + (.5 * x) + eps
print(paste('Length:', length(y)))
plot(x,y)
lslm <- lm(y ~ x)
abline(lslm)
abline(a = -1, b = .5, col = 'red')
legend('bottomright', legend = c('Least Squares', 'Population'), col = c('black', 'red'), lty = 1)
sq <- x^2
poly <- lm(y ~ x + sq)
eps.1 <- rnorm(100, 0, sqrt(0.1))
y.1 <- -1 + (.5 * x) + eps.1
plot(x,y.1)
lslm.1 <- lm(y.1 ~ x)
abline(lslm.1)
abline(a = -1, b = .5, col = 'red')
sq <- x^2
poly.1 <- lm(y.1 ~ x + sq)
eps.5 <- rnorm(100, 0, sqrt(0.5))
y.5 <- -1 + (.5 * x) + eps.5
plot(x,y.5)
lslm.5 <- lm(y.5 ~ x)
abline(lslm.5)
abline(a = -1, b = .5, col = 'red')
sq <- x^2
poly.5 <- lm(y.5 ~ x + sq)
orig <- confint(lslm, level = .95)
noisy <- confint(lslm.1, level = .95)
mostnoise <- confint(lslm.5, level = .95)
set.seed(5072)
x1 = runif(100) #random uniform distribution
x2 = (.5 * x1) + (rnorm(100)/10)
y = 2 + (2 * x1) + (0.3 * x2) + rnorm(100)
print(paste('Cor(x1, y) = ', cor(x1, y)))
print(paste('Cor(x2, y) = ', cor(x2, y)))
print(paste('Cor(x1, x2) = ', cor(x1, x2)))
?corr
?cor
cor(x1 , y)
source('MLAssignment2.R')
source('MLAssignment2.R')
BostonTable
source('MLAssignment2.R')
source('MLAssignment2.R')
source('MLAssignment2.R')
sigmlm[sigmlm$'Pr(>|t|)' < .05,]
source('MLAssignment2.R')
source('MLAssignment2.R')
rm(list = ls())
```{r}
curve(dnorm(x, 29, 5.69), xlim = c(0, 58), xlab = 'Minutes', ylab = 'Probability');
sequ <- seq(15, 30)
curve(dnorm(x, 29, 5.69), xlim = c(0, 58), xlab = 'Minutes', ylab = 'Probability');
sequ <- seq(15, 30)
polygon(x = c(sequ, 30, 15), y = c(dnorm(c(sequ), 29, 5.69), 0, 0), col = 'grey')
curve(dnorm(x, 29, 5.69), xlim = c(0, 58), xlab = 'Minutes', ylab = 'Probability');
sequ <- seq(15, 30)
polygon(x = c(sequ, 30, 15), y = c(dnorm(c(sequ), 29, 5.69), 0, 0), col = 'grey')
abline(v = 15)
curve(dnorm(x, 29, 5.69), xlim = c(0, 58), xlab = 'Minutes', ylab = 'Probability');
sequ <- seq(15, 30)
polygon(x = c(sequ, 30, 15), y = c(dnorm(c(sequ), 29, 5.69), 0, 0), col = 'grey')
abline(v = 15)
abline(v = 30)
curve(dnorm(x, 29, 5.69), xlim = c(0, 58), xlab = 'Minutes', ylab = 'Probability');
sequ <- seq(15, 30)
polygon(x = c(sequ, 30, 15), y = c(dnorm(c(sequ), 29, 5.69), 0, 0), col = 'grey')
abline(v = 15, lty = 3)
abline(v = 30, lty = 3)
curve(dnorm(x, 29, 5.69), xlim = c(0, 58), xlab = 'Minutes', ylab = 'Probability');
sequ <- seq(15, 30)
polygon(x = c(sequ, 30, 15), y = c(dnorm(c(sequ), 29, 5.69), 0, 0), col = 'grey')
abline(v = 29, lty = 3)
?geom
?dgeom
dgeom(8, .1)
?dhyper
as.integer(.07 * 11503)
?dpoisson
?dpois
dpois(1, .8)
dpois(0, .8)
(dpois(0, .8))^24
ppois(1, .8)
dpois(0, 19.2)
7/850
?dbinom
?pnorm
dbinom(7, 850, .04)
dbinom(29, 850, .04)
dbinom(34, 850, .04)
dbinom(7, 850, .04)
?dbinom
pbinom(34, 850, .04)
dbinom(7, 850, .04)
pbinom(7, 850, .04)
pbinom(20, 850, .04)
pbinom(29, 850, .04)
pbinom(7, 850, .04)
dbinom(7, 850, .04)
pbinom(7, 850, .04)
pnorm(0, .01, .13, lower.tail = FALSE)
pnorm(0, .01, .138318, lower.tail = FALSE)
as.integer(.07 * 70)
as.integer(sqrt(.07 * 70 * (1 - .07)))
